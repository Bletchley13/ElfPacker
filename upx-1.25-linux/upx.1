.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "UPX 1"
.TH UPX 1 "29 Jun 2004" "upx 1.25" " "
.SH "NAME"
upx \- compress or expand executable files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBupx\fR [\ \fIcommand\fR\ ] [\ \fIoptions\fR\ ] \fIfilename\fR...
.SH "ABSTRACT"
.IX Header "ABSTRACT"
.Vb 3
\&            The Ultimate Packer for eXecutables
\&  Copyright (c) 1996-2004 Markus Oberhumer & Laszlo Molnar
\&               http://upx.sourceforge.net
.Ve
.PP
\&\fB\s-1UPX\s0\fR is a portable, extendable, high-performance executable packer for
several different executable formats. It achieves an excellent compression
ratio and offers \fI*very*\fR fast decompression. Your executables suffer
no memory overhead or other drawbacks for most of the formats supported.
.PP
While you may use \fB\s-1UPX\s0\fR freely for both non-commercial and commercial
executables (for details see the file \s-1LICENSE\s0), we would highly
appreciate if you credit \fB\s-1UPX\s0\fR and ourselves in the documentation,
possibly including a reference to the \fB\s-1UPX\s0\fR home page. Thanks.
.PP
[ Using \fB\s-1UPX\s0\fR in non-OpenSource applications without proper credits
is considered not politically correct ;\-) ]
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
\&\fB\s-1UPX\s0\fR comes with \s-1ABSOLUTELY\s0 \s-1NO\s0 \s-1WARRANTY\s0; for details see the file \s-1LICENSE\s0.
.PP
Having said that, we think that \fB\s-1UPX\s0\fR is quite stable now. Indeed we
have compressed lots of files without any problems. Also, the
current version has undergone several months of beta testing \-
actually it's more than 4 years since our first public beta back in 1998.
.PP
This is the first production quality release, and we plan that future 1.xx
releases will be backward compatible with this version.
.PP
Please report all problems or suggestions to the authors. Thanks.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1UPX\s0\fR is a versatile executable packer with the following features:
.PP
.Vb 2
\&  - excellent compression ratio: compresses better than zip/gzip,
\&      use UPX to decrease the size of your distribution !
.Ve
.PP
.Vb 1
\&  - very fast decompression: about 10 MB/sec even on my old Pentium 133
.Ve
.PP
.Vb 2
\&  - no memory overhead for your compressed executables for most of the
\&      supported formats
.Ve
.PP
.Vb 3
\&  - safe: you can list, test and unpack your executables
\&      Also, a checksum of both the compressed and uncompressed file is
\&      maintained internally.
.Ve
.PP
.Vb 11
\&  - universal: UPX can pack a number of executable formats:
\&      * atari/tos
\&      * dos/exe
\&      * dos/sys
\&      * dos/com
\&      * djgpp2/coff
\&      * linux/386
\&      * rtm32/pe
\&      * tmt/adam
\&      * watcom/le (supporting DOS4G, PMODE/W, DOS32a and CauseWay)
\&      * win32/pe
.Ve
.PP
.Vb 1
\&  - portable: UPX is written in portable endian-neutral C++
.Ve
.PP
.Vb 2
\&  - extendable: because of the class layout it's very easy to support
\&      new executable formats or add new compression algorithms
.Ve
.PP
.Vb 3
\&  - free: UPX can be distributed and used freely. And from version 0.99
\&      the full source code of UPX is released under the GNU General Public
\&      License (GPL) !
.Ve
.PP
You probably understand now why we call \fB\s-1UPX\s0\fR the "\fIultimate\fR"
executable packer.
.SH "COMMANDS"
.IX Header "COMMANDS"
.Sh "Compress"
.IX Subsection "Compress"
This is the default operation, eg. \fBupx yourfile.exe\fR will compress the file
specified on the command line.
.Sh "Decompress"
.IX Subsection "Decompress"
All \fB\s-1UPX\s0\fR supported file formats can be unpacked using the \fB\-d\fR switch, eg.
\&\fBupx \-d yourfile.exe\fR will uncompress the file you've just compressed.
.Sh "Test"
.IX Subsection "Test"
The \fB\-t\fR command tests the integrity of the compressed and uncompressed
data, eg. \fBupx \-t yourfile.exe\fR check whether your file can be safely
decompressed. Note, that this command doesn't check the whole file, only
the part that will be uncompressed during program execution. This means
that you should not use this command instead of a virus checker.
.Sh "List"
.IX Subsection "List"
The \fB\-l\fR command prints out some information about the compressed files
specified on the command line as parameters, eg \fBupx \-l yourfile.exe\fR
shows the compressed / uncompressed size and the compression ratio of
\&\fIyourfile.exe\fR.
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fB\-q\fR: be quiet, suppress warnings
.PP
\&\fB\-q \-q\fR (or \fB\-qq\fR): be very quiet, suppress errors
.PP
\&\fB\-q \-q \-q\fR (or \fB\-qqq\fR): produce no output at all
.PP
\&\fB\-\-help\fR: prints the help
.PP
\&\fB\-\-version\fR: print the version of \fB\s-1UPX\s0\fR
.PP
[ ...to be written... \- type `\fBupx \-\-help\fR' for now ]
.SH "COMPRESSION LEVELS & TUNING"
.IX Header "COMPRESSION LEVELS & TUNING"
\&\fB\s-1UPX\s0\fR offers ten different compression levels from \fB\-1\fR to \fB\-9\fR,
and \fB\-\-best\fR.  The default compression level is \fB\-8\fR for files
smaller than 512 kB, and \fB\-7\fR otherwise.
.IP "\(bu" 4
Compression levels 1, 2 and 3 are pretty fast.
.IP "\(bu" 4
Compression levels 4, 5 and 6 achieve a good time/ratio performance.
.IP "\(bu" 4
Compression levels 7, 8 and 9 favor compression ratio over speed.
.IP "\(bu" 4
Compression level \fB\-\-best\fR may take a long time.
.PP
Note that compression level \fB\-\-best\fR can be somewhat slow for large
files, but you definitely should use it when releasing a final version
of your program.
.PP
Since \s-1UPX\s0 0.70 there is also an extra compression level \fB\-\-best\fR which
squeezes out even some more compression ratio. While it is usually fine
to use this option with your favorite .com file it may take a long time
to compress a multi-megabyte program. You have been warned.
.PP
Quick start for achieving the best compression ratio:
.Sp
.RS 4
Try \fBupx \-\-best \-\-crp\-ms=999999 \-\-nrv2b \-o result_2b.exe\fR and
\&\fBupx \-\-best \-\-crp\-ms=999999 \-\-nrv2d \-o result_2d.exe\fR, and keep the smaller
of the two resulting executables.
.RE
.PP
Details for achieving the best compression ratio:
.IP "\(bu" 4
Use the option \fB\-\-best\fR.
.IP "\(bu" 4
Try the option \fB\-\-crp\-ms=NUMBER\fR. This uses more memory during compression
to achieve a (slightly) better compression ratio.
.Sp
\&\s-1NUMBER\s0 must be a decimal value from 10000 to 999999, inclusive.
The default value is 10000 (ten thousand).
.IP "\(bu" 4
Manually compress the program multiple times, thereby trying all available
compression methods and keep the best version. Currently available
compression methods options are \fB\-\-nrv2b\fR and \fB\-\-nrv2d\fR.
.IP "\(bu" 4
Try if \fB\-\-overlay=strip\fR works.
.IP "\(bu" 4
For win32/pe programs there's \fB\-\-strip\-relocs=0\fR. See notes below.
.SH "OVERLAY HANDLING OPTIONS"
.IX Header "OVERLAY HANDLING OPTIONS"
\&\fB\s-1UPX\s0\fR handles overlays like many other executable packers do: it simply
copies the overlay after the compressed image. This works with some
files, but doesn't work with others.
.PP
Since version 0.90 \s-1UPX\s0 defaults to \fB\-\-overlay=copy\fR for
all executable formats.
.PP
.Vb 1
\&  --overlay=copy    Copy any extra data attached to the file. [DEFAULT]
.Ve
.PP
.Vb 3
\&  --overlay=strip   Strip any overlay from the program instead of
\&                    copying it. Be warned, this may make the compressed
\&                    program crash or otherwise unusable.
.Ve
.PP
.Vb 1
\&  --overlay=skip    Refuse to compress any program which has an overlay.
.Ve
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
The environment variable \fB\s-1UPX\s0\fR can hold a set of default
options for \s-1UPX\s0. These options are interpreted first and
can be overwritten by explicit command line parameters.
For example:
.PP
.Vb 3
\&    for DOS/Windows:   set UPX=-9 --compress-icons#0
\&    for sh/ksh/zsh:    UPX="-9 --compress-icons=0"; export UPX
\&    for csh/tcsh:      setenv UPX "-9 --compress-icons=0"
.Ve
.PP
Under DOS/Windows you must use '#' instead of '=' when setting the
environment variable because of a \s-1COMMAND\s0.COM limitation.
.PP
Not all of the options are valid in the environment variable \-
\&\fB\s-1UPX\s0\fR will tell you.
.PP
You can use the \fB\-\-no\-env\fR option to turn this support off.
.SH "NOTES FOR THE SUPPORTED EXECUTABLE FORMATS"
.IX Header "NOTES FOR THE SUPPORTED EXECUTABLE FORMATS"
.Sh "\s-1NOTES\s0 \s-1FOR\s0 \s-1ATARI/TOS\s0"
.IX Subsection "NOTES FOR ATARI/TOS"
This is the executable format used by the Atari \s-1ST/TT\s0, a 68000 based
personal computer which was popular in the late '80s.
See http://www.freemint.de for more info.
.PP
Packed programs will be byte-identical to the original after uncompression.
All debug information will be stripped, though.
.PP
Extra options available for this executable format:
.PP
.Vb 1
\&  (none)
.Ve
.Sh "\s-1NOTES\s0 \s-1FOR\s0 \s-1DOS/COM\s0"
.IX Subsection "NOTES FOR DOS/COM"
Obviously \fB\s-1UPX\s0\fR won't work with executables that want to read data from
themselves (like some commandline utilities that ship with Win95/98/ME).
.PP
Compressed programs only work on a 286+.
.PP
Packed programs will be byte-identical to the original after uncompression.
.PP
Maximum uncompressed size: ~65100 bytes.
.PP
Extra options available for this executable format:
.PP
.Vb 1
\&  --8086              Create an executable that works on any 8086 CPU.
.Ve
.Sh "\s-1NOTES\s0 \s-1FOR\s0 \s-1DOS/EXE\s0"
.IX Subsection "NOTES FOR DOS/EXE"
dos/exe stands for all \*(L"normal\*(R" 16\-bit \s-1DOS\s0 executables.
.PP
Obviously \fB\s-1UPX\s0\fR won't work with executables that want to read data from
themselves (like some command line utilities that ship with Win95/98/ME).
.PP
Compressed programs only work on a 286+.
.PP
Extra options available for this executable format:
.PP
.Vb 1
\&  --8086              Create an executable that works on any 8086 CPU.
.Ve
.PP
.Vb 1
\&  --no-reloc          Use no relocation records in the exe header.
.Ve
.Sh "\s-1NOTES\s0 \s-1FOR\s0 \s-1DOS/SYS\s0"
.IX Subsection "NOTES FOR DOS/SYS"
You can only compress plain sys files, sys/exe (two in one)
combos are not supported.
.PP
Compressed programs only work on a 286+.
.PP
Packed programs will be byte-identical to the original after uncompression.
.PP
Maximum uncompressed size: ~65350 bytes.
.PP
Extra options available for this executable format:
.PP
.Vb 1
\&  --8086              Create an executable that works on any 8086 CPU.
.Ve
.Sh "\s-1NOTES\s0 \s-1FOR\s0 \s-1DJGPP2/COFF\s0"
.IX Subsection "NOTES FOR DJGPP2/COFF"
First of all, it is recommended to use \fB\s-1UPX\s0\fR *instead* of \fBstrip\fR. strip has
the very bad habit of replacing your stub with its own (outdated) version.
Additionally \fB\s-1UPX\s0\fR corrects a bug/feature in strip v2.8.x: it
will fix the 4 KByte aligment of the stub.
.PP
\&\fB\s-1UPX\s0\fR includes the full functionality of stubify. This means it will
automatically stubify your \s-1COFF\s0 files. Use the option \fB\-\-coff\fR to
disable this functionality (see below).
.PP
\&\fB\s-1UPX\s0\fR automatically handles Allegro packfiles.
.PP
The \s-1DLM\s0 format (a rather exotic shared library extension) is not supported.
.PP
Packed programs will be byte-identical to the original after uncompression.
All debug information and trailing garbage will be stripped, though.
.PP
Extra options available for this executable format:
.PP
.Vb 2
\&  --coff              Produce COFF output instead of EXE. By default
\&                      UPX keeps your current stub.
.Ve
.Sh "\s-1NOTES\s0 \s-1FOR\s0 \s-1LINUX/386\s0"
.IX Subsection "NOTES FOR LINUX/386"
How it works:
.PP
.Vb 3
\&  Because Linux is a real operating system, the in-place in-memory
\&  decompression scheme used in the other executable formats doesn't
\&  work here.
.Ve
.PP
.Vb 5
\&  Instead we must use temporary decompression to disk. Interestingly -
\&  because of the good memory management of the Linux kernel - this
\&  often does not introduce a noticable delay, and in fact there
\&  will be no disk access at all if you have enough free memory as
\&  the entire process takes places within the filesystem buffers.
.Ve
.PP
.Vb 2
\&  A compressed executable consists of the UPX stub and an overlay
\&  which contains the original program in a compressed form.
.Ve
.PP
.Vb 2
\&  The UPX stub is a statically linked ELF executable and does
\&  the following at program startup:
.Ve
.PP
.Vb 7
\&    1) decompress the overlay to a temporary location in /tmp
\&    2) open the temporary file for reading
\&    3) try to delete the temporary file and start (execve)
\&       the uncompressed program in /tmp using /proc/<pid>/fd/X as
\&       attained by step 2)
\&    4) if that fails, fork off a subprocess to clean up and
\&       start the program in /tmp in the meantime
.Ve
.PP
.Vb 2
\&  The UPX stub is about 1700 bytes long, partly written in assembler
\&  and only uses kernel syscalls. It is not linked against any libc.
.Ve
.PP
Benefits:
.PP
.Vb 4
\&  - UPX can compress all executables, be it AOUT, ELF, libc4, libc5,
\&    libc6, Shell/Perl/Python/... scripts, standalone Java .class
\&    binaries, or whatever...
\&    All scripts and programs will work just as before.
.Ve
.PP
.Vb 2
\&  - Compressed programs are completely self-contained. No need for
\&    any external program.
.Ve
.PP
.Vb 5
\&  - UPX keeps your original program untouched. This means that
\&    after decompression you will have a byte-identical version,
\&    and you can use UPX as a file compressor just like gzip.
\&    [ Note that UPX maintains a checksum of the file internally,
\&      so it is indeed a reliable alternative. ]
.Ve
.PP
.Vb 3
\&  - As the stub only uses syscalls and isn't linked against libc it
\&    should run under any Linux configuration that can run ELF
\&    binaries and has working /proc support.
.Ve
.PP
.Vb 3
\&  - For the same reason compressed executables should run under
\&    FreeBSD and other systems which can run Linux binaries.
\&    [ Please send feedback on this topic ]
.Ve
.PP
Drawbacks:
.PP
.Vb 4
\&  - You need additional free disk space for the uncompressed program
\&    in your /tmp directory. This program is deleted immediately after
\&    decompression, but you still need it for the full execution time
\&    of the program.
.Ve
.PP
.Vb 4
\&  - You must have /proc filesystem support as the stub wants to open
\&    /proc/<pid>/exe and needs /proc/<pid>/fd/X. This also means that you
\&    cannot compress programs that are used during the boot sequence
\&    before /proc is mounted.
.Ve
.PP
.Vb 4
\&  - `ldd' and `size' won't show anything useful because all they
\&    see is the statically linked stub (since version 0.82 the section
\&    headers are stripped from the UPX stub and `size' doesn't even
\&    recognize the file format any longer - looks like a binutils bug).
.Ve
.PP
.Vb 4
\&  - Utilities like `top' will display numerical values in the process
\&    name field. This is because Linux computes the process name from
\&    the first argument of the last execve syscall (which is typically
\&    something like /proc/<pid>/fd/3).
.Ve
.PP
.Vb 6
\&  - To reduce memory requirements during uncompression UPX splits the
\&    original file into blocks, so the compression ratio is a little bit
\&    worse than with the other executable formats (but still quite nice).
\&    [ Advise from kernel experts which can tell me more about the
\&      execve memory semantics is welcome. Maybe this shortcoming
\&      could be removed. ]
.Ve
.PP
.Vb 4
\&  - Because of temporary decompression to disk the decompression speed
\&    is not as fast as with the other executable formats. Still, I can see
\&    no noticable delay when starting programs like my ~3 MB emacs (which
\&    is less than 1 MB when compressed :-).
.Ve
.PP
Notes:
.PP
.Vb 2
\&  - As UPX leaves your original program untouched it is advantageous
\&    to strip it before compression.
.Ve
.PP
.Vb 4
\&  - It is not advisable to compress programs which usually have many
\&    instances running (like `make') because the common segments of
\&    compressed programs won't be shared any longer between different
\&    processes.
.Ve
.PP
.Vb 2
\&  - If you compress a script you will lose platform independence -
\&    this could be a problem if you are using NFS mounted disks.
.Ve
.PP
.Vb 2
\&  - Compression of suid, guid and sticky-bit programs is rejected
\&    because of possible security implications.
.Ve
.PP
.Vb 2
\&  - For the same reason there is no sense in making any compressed
\&    program suid.
.Ve
.PP
.Vb 3
\&  - Obviously UPX won't work with executables that want to read data
\&    from themselves. E.g., this might be a problem for Perl scripts
\&    which access their __DATA__ lines.
.Ve
.PP
.Vb 5
\&  - In case of internal errors the stub will abort with exitcode 127.
\&    Typical reasons for this to happen are that the program has somehow
\&    been modified after compression, you have run out of disk space
\&    or your /proc filesystem is not yet mounted.
\&    Running `strace -o strace.log compressed_exe' will tell you more.
.Ve
.PP
Extra options available for this executable format:
.PP
.Vb 1
\&  (none)
.Ve
.Sh "\s-1NOTES\s0 \s-1FOR\s0 \s-1RTM32/PE\s0"
.IX Subsection "NOTES FOR RTM32/PE"
Same as win32/pe.
.Sh "\s-1NOTES\s0 \s-1FOR\s0 \s-1TMT/ADAM\s0"
.IX Subsection "NOTES FOR TMT/ADAM"
This format is used by the \s-1TMT\s0 Pascal compiler \- see http://www.tmt.com/ .
.PP
Extra options available for this executable format:
.PP
.Vb 1
\&  (none)
.Ve
.Sh "\s-1NOTES\s0 \s-1FOR\s0 \s-1WATCOM/LE\s0"
.IX Subsection "NOTES FOR WATCOM/LE"
\&\fB\s-1UPX\s0\fR has been successfully tested with the following extenders:
  \s-1DOS4G\s0, \s-1DOS4GW\s0, \s-1PMODE/W\s0, DOS32a, CauseWay.
  The \s-1WDOS/X\s0 extender is partly supported (for details
  see the file bugs \s-1BUGS\s0).
.PP
DLLs and the \s-1LX\s0 format are not supported.
.PP
Extra options available for this executable format:
.PP
.Vb 2
\&  --le                Produce an unbound LE output instead of
\&                      keeping the current stub.
.Ve
.Sh "\s-1NOTES\s0 \s-1FOR\s0 \s-1WIN32/PE\s0"
.IX Subsection "NOTES FOR WIN32/PE"
The \s-1PE\s0 support in \fB\s-1UPX\s0\fR is quite stable now, but definitely there are
still some incompabilities with some files.
.PP
Because of the way \fB\s-1UPX\s0\fR (and other packers for this format) works, you
can see increased memory usage of your compressed files. If you start
several instances of huge compressed programs you're wasting memory
because the common segements of the program won't get shared
across the instances.
On the other hand if you're compressing only smaller programs, or
running only one instance of larger programs, then this penalty is
smaller, but it's still there.
.PP
If you're running executables from network, then compressed programs
will load faster, and require less bandwidth during execution.
.PP
DLLs are supported.
.PP
Screensavers are supported, with the restriction that the filename
must end with \*(L".scr\*(R" (as screensavers are handled slightly different
than normal exe files).
.PP
Extra options available for this executable format:
.PP
.Vb 9
\& --compress-exports=0 Don't compress the export section.
\&                      Use this if you plan to run the compressed
\&                      program under Wine.
\& --compress-exports=1 Compress the export section. [DEFAULT]
\&                      Compression of the export section can improve the
\&                      compression ratio quite a bit but may not work
\&                      with all programs (like winword.exe).
\&                      UPX never compresses the export section of a DLL
\&                      regardless of this option.
.Ve
.PP
.Vb 4
\&  --compress-icons=0  Don't compress any icons.
\&  --compress-icons=1  Compress all but the first icon.
\&  --compress-icons=2  Compress all icons which are not in the
\&                      first icon directory. [DEFAULT]
.Ve
.PP
.Vb 1
\&  --compress-resources=0  Don't compress any resources at all.
.Ve
.PP
.Vb 3
\&  --force             Force compression even when there is an
\&                      unexpected value in a header field.
\&                      Use with care.
.Ve
.PP
.Vb 9
\&  --strip-relocs=0    Don't strip relocation records.
\&  --strip-relocs=1    Strip relocation records. [DEFAULT]
\&                      This option only works on executables with base
\&                      address greater or equal to 0x400000. Usually the
\&                      compressed files becomes smaller, but some files
\&                      may become larger. Note that the resulting file will
\&                      not work under Win32s.
\&                      UPX never strips relocations from a DLL
\&                      regardless of this option.
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
Exit status is normally 0; if an error occurs, exit status
is 1. If a warning occurs, exit status is 2.
.PP
\&\fB\s-1UPX\s0\fR's diagnostics are intended to be self\-explanatory.
.SH "BUGS"
.IX Header "BUGS"
Please report all bugs immediately to the authors.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\& Markus F.X.J. Oberhumer <markus@oberhumer.com>
\& http://www.oberhumer.com
.Ve
.PP
.Vb 1
\& Laszlo Molnar <ml1050@users.sourceforge.net>
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1996\-2004 Markus Franz Xaver Johannes Oberhumer
.PP
Copyright (C) 1996\-2004 Laszlo Molnar
.PP
This program may be used freely, and you are welcome to
redistribute it under certain conditions.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the
\&\s-1UPX\s0 License Agreement for more details.
.PP
You should have received a copy of the \s-1UPX\s0 License Agreement along
with this program; see the file \s-1LICENSE\s0. If not, visit the \s-1UPX\s0 home page.
